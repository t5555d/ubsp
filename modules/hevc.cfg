import rbsp
import nalu
import math
import sei
f(v) {
    return read_bits(v)
}
u(v) {
    return read_unsigned(v)
}
i(v) {
    return read_signed(v)
}
ue(v) {
    return read_unsigned_exp_golomb()
}
se(v) {
    return read_signed_exp_golomb()
}
Log2(x) {
    return log2(x)
}
Ceil(x) {
    return ceil(x)
}
global {
    cprms_present_flag[0] = 1
}
infer ue.v = 0
infer se.v = 0
infer inter_ref_pic_set_prediction_flag = 0
infer sps_range_extension_flag = 0
infer sps_multilayer_extension_flag = 0
infer sps_3d_extension_flag = 0
infer sps_scc_extension_flag = 0
infer sps_extension_4bits = 0
infer sps_max_sub_layers_minus1 = sps_ext_or_max_sub_layers_minus1 == 7 ? vps_max_sub_layers_minus1 : sps_ext_or_max_sub_layers_minus1
infer sps_ext_or_max_sub_layers_minus1 = 7
infer MinCbLog2SizeY = log2_min_luma_coding_block_size_minus3 + 3
infer CtbLog2SizeY = MinCbLog2SizeY + log2_diff_max_min_luma_coding_block_size
infer MinCbSizeY = 1 << MinCbLog2SizeY
infer CtbSizeY = 1 << CtbLog2SizeY
infer PicWidthInMinCbsY = pic_width_in_luma_samples / MinCbSizeY
infer PicWidthInCtbsY = Ceil(pic_width_in_luma_samples / CtbSizeY)
infer PicHeightInMinCbsY = pic_height_in_luma_samples / MinCbSizeY
infer PicHeightInCtbsY = Ceil(pic_height_in_luma_samples / CtbSizeY)
infer PicSizeInMinCbsY = PicWidthInMinCbsY * PicHeightInMinCbsY
infer PicSizeInCtbsY = PicWidthInCtbsY * PicHeightInCtbsY
infer PicSizeInSamplesY = pic_width_in_luma_samples * pic_height_in_luma_samples
infer PicWidthInSamplesC = pic_width_in_luma_samples / SubWidthC
infer PicHeightInSamplesC = pic_height_in_luma_samples / SubHeightC
infer pps_range_extension_flag = 0
infer pps_multilayer_extension_flag = 0
infer pps_3d_extension_flag = 0
infer pps_scc_extension_flag = 0
infer pps_extension_4bits = 0
infer pps_slice_act_qp_offsets_present_flag = 0
infer dependent_slice_segment_flag = 0
infer separate_colour_plane_flag = 0
infer ChromaArrayType = separate_colour_plane_flag ? 0 : chroma_format_idc
infer chroma_qp_offset_list_enabled_flag = 0
infer deblocking_filter_override_enabled_flag = 0
infer pps_deblocking_filter_disabled_flag = 0
infer deblocking_filter_override_flag = 0
infer slice_deblocking_filter_disabled_flag = pps_deblocking_filter_disabled_flag
infer lt_ref_pic_poc_lsb_sps.v = log2_max_pic_order_cnt_lsb_minus4 + 4
infer slice_pic_order_cnt_lsb.v = log2_max_pic_order_cnt_lsb_minus4 + 4
infer slice_segment_address = 0
infer slice_segment_address.v = Ceil(Log2(PicSizeInCtbsY))
infer slice_temporal_mvp_enabled_flag = 0
infer short_term_ref_pic_set_idx.v = Ceil(Log2(num_short_term_ref_pic_sets))
infer lt_idx_sps.v = Ceil(Log2(num_long_term_ref_pics_sps))
infer poc_lsb_lt.v = log2_max_pic_order_cnt_lsb_minus4 + 4
infer entry_point_offset_minus1.v = offset_len_minus1 + 1
infer list_entry_l0.v = Ceil(Log2(NumPicTotalCurr))
infer list_entry_l1.v = Ceil(Log2(NumPicTotalCurr))
infer CurrRpsIdx = short_term_ref_pic_set_sps_flag ? short_term_ref_pic_set_idx : num_short_term_ref_pic_sets
infer num_long_term_sps = 0
infer num_long_term_pics = 0
infer pps_curr_pic_ref_enabled_flag = 0
infer collocated_from_l0_flag = 1
infer num_ref_idx_l0_active_minus1 = num_ref_idx_l0_default_active_minus1
infer num_ref_idx_l1_active_minus1 = num_ref_idx_l1_default_active_minus1
infer motion_vector_resolution_control_idc = 0
infer NumPicTotalCurr {
    NumPicTotalCurr = 0
    i = 0
    for (; i < NumNegativePics[CurrRpsIdx]; i++) {
        if (UsedByCurrPicS0[CurrRpsIdx][i]) {
            NumPicTotalCurr++
        }
    }
    i = 0
    for (; i < NumPositivePics[CurrRpsIdx]; i++) {
        if (UsedByCurrPicS1[CurrRpsIdx][i]) {
            NumPicTotalCurr++
        }
    }
    i = 0
    for (; i < num_long_term_sps + num_long_term_pics; i++) {
        if (UsedByCurrPicLt[i]) {
            NumPicTotalCurr++
        }
    }
    if (pps_curr_pic_ref_enabled_flag) {
        NumPicTotalCurr++
    }
}
infer NumNegativePics { deriveRefPics(stRpsIdx) }
infer NumPositivePics { deriveRefPics(stRpsIdx) }
infer UsedByCurrPicS0 { deriveRefPics(stRpsIdx) }
infer UsedByCurrPicS1 { deriveRefPics(stRpsIdx) }
infer deltaRps = ( 1 - 2 * delta_rps_sign ) * ( abs_delta_rps_minus1 + 1 )
deriveRefPics(stRpsIdx) {
    if (inter_ref_pic_set_prediction_flag == 0) {
        NumNegativePics[ stRpsIdx ] = num_negative_pics
        NumPositivePics[ stRpsIdx ] = num_positive_pics 
        
        for (i = 0; i < num_negative_pics; i++) {
            UsedByCurrPicS0[ stRpsIdx ][ i ] = used_by_curr_pic_s0_flag[ i ]
            if (i == 0)
                DeltaPocS0[ stRpsIdx ][ i ] = -( delta_poc_s0_minus1[ i ] + 1 )
            else
                DeltaPocS0[ stRpsIdx ][ i ] = DeltaPocS0[ stRpsIdx ][ i - 1 ] - ( delta_poc_s0_minus1[ i ] + 1 )
        }
        
        for (i = 0; i < num_positive_pics; i++) {
            UsedByCurrPicS1[ stRpsIdx ][ i ] = used_by_curr_pic_s1_flag[ i ] 
            if (i == 0)
                DeltaPocS1[ stRpsIdx ][ i ] = delta_poc_s1_minus1[ i ] + 1 
            else
                DeltaPocS1[ stRpsIdx ][ i ] = DeltaPocS1[ stRpsIdx ][ i - 1 ] + ( delta_poc_s1_minus1[ i ] + 1 )
        }
        
        return
    }
    
    i = 0
    for (j = NumPositivePics[RefRpsIdx] - 1; j >= 0; j--) {
        dPoc = DeltaPocS1[RefRpsIdx][j] + deltaRps
        if (dPoc < 0 && use_delta_flag[NumNegativePics[RefRpsIdx] + j]) {
            DeltaPocS0[stRpsIdx][i] = dPoc
            UsedByCurrPicS0[stRpsIdx][i++] = used_by_curr_pic_flag[NumNegativePics[RefRpsIdx] + j]
        }
    }
    if (deltaRps < 0 && use_delta_flag[NumDeltaPocs[RefRpsIdx]]) {
        DeltaPocS0[stRpsIdx][i] = deltaRps
        UsedByCurrPicS0[stRpsIdx][i++] = used_by_curr_pic_flag[NumDeltaPocs[RefRpsIdx]]
    }
    for (j = 0; j < NumNegativePics[RefRpsIdx]; j++) {
        dPoc = DeltaPocS0[RefRpsIdx][j] + deltaRps
        if (dPoc < 0 && use_delta_flag[j]) {
            DeltaPocS0[stRpsIdx][i] = dPoc
            UsedByCurrPicS0[stRpsIdx][i++] = used_by_curr_pic_flag[j]
        }
    }
    NumNegativePics[stRpsIdx] = i
    i = 0
    for (j = NumNegativePics[RefRpsIdx] - 1; j >= 0; j--) {
        dPoc = DeltaPocS0[RefRpsIdx][j] + deltaRps
        if (dPoc > 0 && use_delta_flag[j]) {
            DeltaPocS1[stRpsIdx][i] = dPoc
            UsedByCurrPicS1[stRpsIdx][i++] = used_by_curr_pic_flag[j]
        }
    }
    if (deltaRps > 0 && use_delta_flag[NumDeltaPocs[RefRpsIdx]]) {
        DeltaPocS1[stRpsIdx][i] = deltaRps
        UsedByCurrPicS1[stRpsIdx][i++] = used_by_curr_pic_flag[NumDeltaPocs[RefRpsIdx]]
    }
    for (j = 0; j < NumPositivePics[RefRpsIdx]; j++) {
        dPoc = DeltaPocS1[RefRpsIdx][j] + deltaRps
        if (dPoc > 0 && use_delta_flag[NumNegativePics[RefRpsIdx] + j]) {
            DeltaPocS1[stRpsIdx][i] = dPoc
            UsedByCurrPicS1[stRpsIdx][i++] = used_by_curr_pic_flag[NumNegativePics[RefRpsIdx] + j]
        }
    }
    NumPositivePics[stRpsIdx] = i
}
infer fixed_pic_rate_within_cvs_flag {
    for (i = 0; i <= maxNumSubLayersMinus1; i++) {
        fixed_pic_rate_within_cvs_flag[i] = 1
    }
}
infer low_delay_hrd_flag {
    for (i = 0; i <= maxNumSubLayersMinus1; i++) {
        low_delay_hrd_flag[i] = 0
    }
}
infer cpb_cnt_minus1 {
    for (i = 0; i <= maxNumSubLayersMinus1; i++) {
        cpb_cnt_minus1[i] = 0
    }
}
infer sub_pic_hrd_params_present_flag = 0
global {
    TRAIL_N = 0
    TRAIL_R = 1
    TSA_N = 2
    TSA_R = 3
    STSA_N = 4
    STSA_R = 5
    RADL_N = 6
    RADL_R = 7
    RASL_N = 8
    RASL_R = 9
    BLA_W_LP = 16
    BLA_W_RADL = 17
    BLA_N_LP = 18
    IDR_W_RADL = 19
    IDR_N_LP = 20
    CRA_NUT = 21
    RSV_IRAP_VCL23 = 23
    RSV_VCL31 = 31
    VPS_NUT = 32
    SPS_NUT = 33
    PPS_NUT = 34
    AUD_NUT = 35
    EOS_NUT = 36
    EOB_NUT = 37
    FD_NUT = 38
    PREFIX_SEI_NUT = 39
    SUFFIX_SEI_NUT = 40
    B = 0
    P = 1
    I = 2
}
slice_segment_data() {
    slice_segment_data_size skip_rbsp_data()
}
nal_unit() {
    nal_unit_header()
    if (nal_unit_type >= TRAIL_N && nal_unit_type <= RSV_VCL31) {
        slice_segment_layer_rbsp()
    } else if (nal_unit_type == VPS_NUT) {
        video_parameter_set_rbsp()
    } else if (nal_unit_type == SPS_NUT) {
        seq_parameter_set_rbsp()
    } else if (nal_unit_type == PPS_NUT) {
        pic_parameter_set_rbsp()
    } else if (nal_unit_type == AUD_NUT) {
        access_unit_delimiter_rbsp()
    } else if (nal_unit_type == EOS_NUT) {
        end_of_seq_rbsp()
    } else if (nal_unit_type == EOB_NUT) {
        end_of_bitstream_rbsp()
    } else if (nal_unit_type == FD_NUT) {
        filler_data_rbsp()
    } else if (nal_unit_type == PREFIX_SEI_NUT || nal_unit_type == SUFFIX_SEI_NUT) {
        sei_rbsp()
    }
}
nal_unit_header() {
    forbidden_zero_bit f(1)
    nal_unit_type u(6)
    nuh_layer_id u(6)
    nuh_temporal_id_plus1 u(3)
}
video_parameter_set_rbsp() {
    vps_video_parameter_set_id u(4)
    vps_base_layer_internal_flag u(1)
    vps_base_layer_available_flag u(1)
    vps_max_layers_minus1 u(6)
    vps_max_sub_layers_minus1 u(3)
    vps_temporal_id_nesting_flag u(1)
    vps_reserved_0xffff_16bits u(16)
    profile_tier_level(1, vps_max_sub_layers_minus1)
    vps_sub_layer_ordering_info_present_flag u(1)
    for (i = vps_sub_layer_ordering_info_present_flag ? 0 : vps_max_sub_layers_minus1; i <= vps_max_sub_layers_minus1; i++) {
        vps_max_dec_pic_buffering_minus1[i] ue(v)
        vps_max_num_reorder_pics[i] ue(v)
        vps_max_latency_increase_plus1[i] ue(v)
    }
    vps_max_layer_id u(6)
    vps_num_layer_sets_minus1 ue(v)
    for (i = 1; i <= vps_num_layer_sets_minus1; i++) {
        for (j = 0; j <= vps_max_layer_id; j++) {
            layer_id_included_flag[i][j] u(1)
        }
    }
    vps_timing_info_present_flag u(1)
    if (vps_timing_info_present_flag) {
        vps_num_units_in_tick u(32)
        vps_time_scale u(32)
        vps_poc_proportional_to_timing_flag u(1)
        if (vps_poc_proportional_to_timing_flag) {
            vps_num_ticks_poc_diff_one_minus1 ue(v)
        }
        vps_num_hrd_parameters ue(v)
        for (i = 0; i < vps_num_hrd_parameters; i++) {
            hrd_layer_set_idx[i] ue(v)
            if (i > 0) {
                cprms_present_flag[i] u(1)
            }
            hrd_parameters(cprms_present_flag[i], vps_max_sub_layers_minus1)
        }
    }
    vps_extension_flag u(1)
    if (vps_extension_flag) {
        while (more_rbsp_data()) {
            vps_extension_data_flag u(1)
        }
    }
    rbsp_trailing_bits()
}
seq_parameter_set_rbsp() {
    sps_video_parameter_set_id u(4)
    sps_max_sub_layers_minus1 u(3)
    sps_temporal_id_nesting_flag u(1)
    profile_tier_level(1, sps_max_sub_layers_minus1)
    sps_seq_parameter_set_id ue(v)
    chroma_format_idc ue(v)
    if (chroma_format_idc == 3) {
        separate_colour_plane_flag u(1)
    }
    pic_width_in_luma_samples ue(v)
    pic_height_in_luma_samples ue(v)
    conformance_window_flag u(1)
    if (conformance_window_flag) {
        conf_win_left_offset ue(v)
        conf_win_right_offset ue(v)
        conf_win_top_offset ue(v)
        conf_win_bottom_offset ue(v)
    }
    bit_depth_luma_minus8 ue(v)
    bit_depth_chroma_minus8 ue(v)
    log2_max_pic_order_cnt_lsb_minus4 ue(v)
    sps_sub_layer_ordering_info_present_flag u(1)
    for (i = sps_sub_layer_ordering_info_present_flag ? 0 : sps_max_sub_layers_minus1; i <= sps_max_sub_layers_minus1; i++) {
        sps_max_dec_pic_buffering_minus1[i] ue(v)
        sps_max_num_reorder_pics[i] ue(v)
        sps_max_latency_increase_plus1[i] ue(v)
    }
    log2_min_luma_coding_block_size_minus3 ue(v)
    log2_diff_max_min_luma_coding_block_size ue(v)
    log2_min_luma_transform_block_size_minus2 ue(v)
    log2_diff_max_min_luma_transform_block_size ue(v)
    max_transform_hierarchy_depth_inter ue(v)
    max_transform_hierarchy_depth_intra ue(v)
    scaling_list_enabled_flag u(1)
    if (scaling_list_enabled_flag) {
        sps_scaling_list_data_present_flag u(1)
        if (sps_scaling_list_data_present_flag) {
            scaling_list_data()
        }
    }
    amp_enabled_flag u(1)
    sample_adaptive_offset_enabled_flag u(1)
    pcm_enabled_flag u(1)
    if (pcm_enabled_flag) {
        pcm_sample_bit_depth_luma_minus1 u(4)
        pcm_sample_bit_depth_chroma_minus1 u(4)
        log2_min_pcm_luma_coding_block_size_minus3 ue(v)
        log2_diff_max_min_pcm_luma_coding_block_size ue(v)
        pcm_loop_filter_disabled_flag u(1)
    }
    num_short_term_ref_pic_sets ue(v)
    for (i = 0; i < num_short_term_ref_pic_sets; i++) {
        st_ref_pic_set(i)
    }
    long_term_ref_pics_present_flag u(1)
    if (long_term_ref_pics_present_flag) {
        num_long_term_ref_pics_sps ue(v)
        for (i = 0; i < num_long_term_ref_pics_sps; i++) {
            lt_ref_pic_poc_lsb_sps[i] u(v)
            used_by_curr_pic_lt_sps_flag[i] u(1)
        }
    }
    sps_temporal_mvp_enabled_flag u(1)
    strong_intra_smoothing_enabled_flag u(1)
    vui_parameters_present_flag u(1)
    if (vui_parameters_present_flag) {
        vui_parameters()
    }
    sps_extension_present_flag u(1)
    if (sps_extension_present_flag) {
        sps_range_extension_flag u(1)
        sps_multilayer_extension_flag u(1)
        sps_3d_extension_flag u(1)
        sps_scc_extension_flag u(1)
        sps_extension_4bits u(4)
    }
    if (sps_range_extension_flag) {
        sps_range_extension()
    }
    if (sps_multilayer_extension_flag) {
        sps_multilayer_extension()
    }
    if (sps_3d_extension_flag) {
        sps_3d_extension()
    }
    if (sps_scc_extension_flag) {
        sps_scc_extension()
    }
    if (sps_extension_4bits) {
        while (more_rbsp_data()) {
            sps_extension_data_flag u(1)
        }
    }
    rbsp_trailing_bits()
}
sps_range_extension() {
    transform_skip_rotation_enabled_flag u(1)
    transform_skip_context_enabled_flag u(1)
    implicit_rdpcm_enabled_flag u(1)
    explicit_rdpcm_enabled_flag u(1)
    extended_precision_processing_flag u(1)
    intra_smoothing_disabled_flag u(1)
    high_precision_offsets_enabled_flag u(1)
    persistent_rice_adaptation_enabled_flag u(1)
    cabac_bypass_alignment_enabled_flag u(1)
}
sps_scc_extension() {
    sps_curr_pic_ref_enabled_flag u(1)
    palette_mode_enabled_flag u(1)
    if (palette_mode_enabled_flag) {
        palette_max_size ue(v)
        delta_palette_max_predictor_size ue(v)
        sps_palette_predictor_initializers_present_flag u(1)
        if (sps_palette_predictor_initializers_present_flag) {
            sps_num_palette_predictor_initializers_minus1 ue(v)
            numComps = chroma_format_idc == 0 ? 1 : 3
            for (comp = 0; comp < numComps; comp++) {
                for (i = 0; i <= sps_num_palette_predictor_initializers_minus1; i++) {
                    sps_palette_predictor_initializer[comp][i] u(v)
                }
            }
        }
    }
    motion_vector_resolution_control_idc u(2)
    intra_boundary_filtering_disabled_flag u(1)
}
pic_parameter_set_rbsp() {
    pps_pic_parameter_set_id ue(v)
    pps_seq_parameter_set_id ue(v)
    dependent_slice_segments_enabled_flag u(1)
    output_flag_present_flag u(1)
    num_extra_slice_header_bits u(3)
    sign_data_hiding_enabled_flag u(1)
    cabac_init_present_flag u(1)
    num_ref_idx_l0_default_active_minus1 ue(v)
    num_ref_idx_l1_default_active_minus1 ue(v)
    init_qp_minus26 se(v)
    constrained_intra_pred_flag u(1)
    transform_skip_enabled_flag u(1)
    cu_qp_delta_enabled_flag u(1)
    if (cu_qp_delta_enabled_flag) {
        diff_cu_qp_delta_depth ue(v)
    }
    pps_cb_qp_offset se(v)
    pps_cr_qp_offset se(v)
    pps_slice_chroma_qp_offsets_present_flag u(1)
    weighted_pred_flag u(1)
    weighted_bipred_flag u(1)
    transquant_bypass_enabled_flag u(1)
    tiles_enabled_flag u(1)
    entropy_coding_sync_enabled_flag u(1)
    if (tiles_enabled_flag) {
        num_tile_columns_minus1 ue(v)
        num_tile_rows_minus1 ue(v)
        uniform_spacing_flag u(1)
        if (!uniform_spacing_flag) {
            for (i = 0; i < num_tile_columns_minus1; i++) {
                column_width_minus1[i] ue(v)
            }
            for (i = 0; i < num_tile_rows_minus1; i++) {
                row_height_minus1[i] ue(v)
            }
        }
        loop_filter_across_tiles_enabled_flag u(1)
    }
    pps_loop_filter_across_slices_enabled_flag u(1)
    deblocking_filter_control_present_flag u(1)
    if (deblocking_filter_control_present_flag) {
        deblocking_filter_override_enabled_flag u(1)
        pps_deblocking_filter_disabled_flag u(1)
        if (!pps_deblocking_filter_disabled_flag) {
            pps_beta_offset_div2 se(v)
            pps_tc_offset_div2 se(v)
        }
    }
    pps_scaling_list_data_present_flag u(1)
    if (pps_scaling_list_data_present_flag) {
        scaling_list_data()
    }
    lists_modification_present_flag u(1)
    log2_parallel_merge_level_minus2 ue(v)
    slice_segment_header_extension_present_flag u(1)
    pps_extension_present_flag u(1)
    if (pps_extension_present_flag) {
        pps_range_extension_flag u(1)
        pps_multilayer_extension_flag u(1)
        pps_3d_extension_flag u(1)
        pps_scc_extension_flag u(1)
        pps_extension_4bits u(4)
    }
    if (pps_range_extension_flag) {
        pps_range_extension()
    }
    if (pps_multilayer_extension_flag) {
        pps_multilayer_extension()
    }
    if (pps_3d_extension_flag) {
        pps_3d_extension()
    }
    if (pps_scc_extension_flag) {
        pps_scc_extension()
    }
    if (pps_extension_4bits) {
        while (more_rbsp_data()) {
            pps_extension_data_flag u(1)
        }
    }
    rbsp_trailing_bits()
}
pps_range_extension() {
    if (transform_skip_enabled_flag) {
        log2_max_transform_skip_block_size_minus2 ue(v)
    }
    cross_component_prediction_enabled_flag u(1)
    chroma_qp_offset_list_enabled_flag u(1)
    if (chroma_qp_offset_list_enabled_flag) {
        diff_cu_chroma_qp_offset_depth ue(v)
        chroma_qp_offset_list_len_minus1 ue(v)
        for (i = 0; i <= chroma_qp_offset_list_len_minus1; i++) {
            cb_qp_offset_list[i] se(v)
            cr_qp_offset_list[i] se(v)
        }
    }
    log2_sao_offset_scale_luma ue(v)
    log2_sao_offset_scale_chroma ue(v)
}
pps_scc_extension() {
    pps_curr_pic_ref_enabled_flag u(1)
    residual_adaptive_colour_transform_enabled_flag u(1)
    if (residual_adaptive_colour_transform_enabled_flag) {
        pps_slice_act_qp_offsets_present_flag u(1)
        pps_act_y_qp_offset_plus5 se(v)
        pps_act_cb_qp_offset_plus5 se(v)
        pps_act_cr_qp_offset_plus3 se(v)
    }
    pps_palette_predictor_initializers_present_flag u(1)
    if (pps_palette_predictor_initializers_present_flag) {
        pps_num_palette_predictor_initializers ue(v)
        if (pps_num_palette_predictor_initializers > 0) {
            monochrome_palette_flag u(1)
            luma_bit_depth_entry_minus8 ue(v)
            if (!monochrome_palette_flag) {
                chroma_bit_depth_entry_minus8 ue(v)
            }
            numComps = monochrome_palette_flag ? 1 : 3
            for (comp = 0; comp < numComps; comp++) {
                for (i = 0; i < pps_num_palette_predictor_initializers; i++) {
                    pps_palette_predictor_initializer[comp][i] u(v)
                }
            }
        }
    }
}
sei_rbsp() {
    do {
        sei_message()
    }while (more_rbsp_data())
    rbsp_trailing_bits()
}
access_unit_delimiter_rbsp() {
    pic_type u(3)
    rbsp_trailing_bits()
}
filler_data_rbsp() {
    while (next_bits(8) == 255) {
        ff_byte2 f(8)
    }
    rbsp_trailing_bits()
}
slice_segment_layer_rbsp() {
    slice_segment_header()
    slice_segment_data()
}
rbsp_trailing_bits() {
    rbsp_stop_one_bit f(1)
    while (!byte_aligned()) {
        rbsp_alignment_zero_bit f(1)
    }
}
byte_alignment() {
    alignment_bit_equal_to_one f(1)
    while (!byte_aligned()) {
        alignment_bit_equal_to_zero f(1)
    }
}
profile_tier_level(profilePresentFlag, maxNumSubLayersMinus1) {
    if (profilePresentFlag) {
        general_profile_space u(2)
        general_tier_flag u(1)
        general_profile_idc u(5)
        for (j = 0; j < 32; j++) {
            general_profile_compatibility_flag[j] u(1)
        }
        general_progressive_source_flag u(1)
        general_interlaced_source_flag u(1)
        general_non_packed_constraint_flag u(1)
        general_frame_only_constraint_flag u(1)
        if (general_profile_idc == 4 || general_profile_compatibility_flag[4] || general_profile_idc == 5 || general_profile_compatibility_flag[5] || general_profile_idc == 6 || general_profile_compatibility_flag[6] || general_profile_idc == 7 || general_profile_compatibility_flag[7] || general_profile_idc == 8 || general_profile_compatibility_flag[8] || general_profile_idc == 9 || general_profile_compatibility_flag[9] || general_profile_idc == 10 || general_profile_compatibility_flag[10]) {
            general_max_12bit_constraint_flag u(1)
            general_max_10bit_constraint_flag u(1)
            general_max_8bit_constraint_flag u(1)
            general_max_422chroma_constraint_flag u(1)
            general_max_420chroma_constraint_flag u(1)
            general_max_monochrome_constraint_flag u(1)
            general_intra_constraint_flag u(1)
            general_one_picture_only_constraint_flag u(1)
            general_lower_bit_rate_constraint_flag u(1)
            if (general_profile_idc == 5 || general_profile_compatibility_flag[5] || general_profile_idc == 9 || general_profile_compatibility_flag[9] || general_profile_idc == 10 || general_profile_compatibility_flag[10]) {
                general_max_14bit_constraint_flag u(1)
                general_reserved_zero_33bits u(33)
            } else {
                general_reserved_zero_34bits u(34)
            }
        } else if (general_profile_idc == 2 || general_profile_compatibility_flag[2]) {
            general_reserved_zero_7bits u(7)
            general_one_picture_only_constraint_flag u(1)
            general_reserved_zero_35bits u(35)
        } else {
            general_reserved_zero_43bits u(43)
        }
        if (general_profile_idc >= 1 && general_profile_idc <= 5 || general_profile_idc == 9 || general_profile_compatibility_flag[1] || general_profile_compatibility_flag[2] || general_profile_compatibility_flag[3] || general_profile_compatibility_flag[4] || general_profile_compatibility_flag[5] || general_profile_compatibility_flag[9]) {
            general_inbld_flag u(1)
        } else {
            general_reserved_zero_bit u(1)
        }
    }
    general_level_idc u(8)
    for (i = 0; i < maxNumSubLayersMinus1; i++) {
        sub_layer_profile_present_flag[i] u(1)
        sub_layer_level_present_flag[i] u(1)
    }
    if (maxNumSubLayersMinus1 > 0) {
        for (i = maxNumSubLayersMinus1; i < 8; i++) {
            reserved_zero_2bits[i] u(2)
        }
    }
    for (i = 0; i < maxNumSubLayersMinus1; i++) {
        if (sub_layer_profile_present_flag[i]) {
            sub_layer_profile_space[i] u(2)
            sub_layer_tier_flag[i] u(1)
            sub_layer_profile_idc[i] u(5)
            for (j = 0; j < 32; j++) {
                sub_layer_profile_compatibility_flag[i][j] u(1)
            }
            sub_layer_progressive_source_flag[i] u(1)
            sub_layer_interlaced_source_flag[i] u(1)
            sub_layer_non_packed_constraint_flag[i] u(1)
            sub_layer_frame_only_constraint_flag[i] u(1)
            if (sub_layer_profile_idc[i] == 4 || sub_layer_profile_compatibility_flag[i][4] || sub_layer_profile_idc[i] == 5 || sub_layer_profile_compatibility_flag[i][5] || sub_layer_profile_idc[i] == 6 || sub_layer_profile_compatibility_flag[i][6] || sub_layer_profile_idc[i] == 7 || sub_layer_profile_compatibility_flag[i][7] || sub_layer_profile_idc[i] == 8 || sub_layer_profile_compatibility_flag[i][8] || sub_layer_profile_idc[i] == 9 || sub_layer_profile_compatibility_flag[i][9] || sub_layer_profile_idc[i] == 10 || sub_layer_profile_compatibility_flag[i][10]) {
                sub_layer_max_12bit_constraint_flag[i] u(1)
                sub_layer_max_10bit_constraint_flag[i] u(1)
                sub_layer_max_8bit_constraint_flag[i] u(1)
                sub_layer_max_422chroma_constraint_flag[i] u(1)
                sub_layer_max_420chroma_constraint_flag[i] u(1)
                sub_layer_max_monochrome_constraint_flag[i] u(1)
                sub_layer_intra_constraint_flag[i] u(1)
                sub_layer_one_picture_only_constraint_flag[i] u(1)
                sub_layer_lower_bit_rate_constraint_flag[i] u(1)
                if (sub_layer_profile_idc[i] == 5 || sub_layer_profile_compatibility_flag[i][5]) {
                    sub_layer_max_14bit_constraint_flag[i] u(1)
                    sub_layer_reserved_zero_33bits[i] u(33)
                } else {
                    sub_layer_reserved_zero_34bits[i] u(34)
                }
            } else if (sub_layer_profile_idc[i] == 2 || sub_layer_profile_compatibility_flag[i][2]) {
                sub_layer_reserved_zero_7bits[i] u(7)
                sub_layer_one_picture_only_constraint_flag[i] u(1)
                sub_layer_reserved_zero_35bits[i] u(35)
            } else {
                sub_layer_reserved_zero_43bits[i] u(43)
            }
            if (sub_layer_profile_idc[i] >= 1 && sub_layer_profile_idc[i] <= 5 || sub_layer_profile_idc[i] == 9 || sub_layer_profile_compatibility_flag[1] || sub_layer_profile_compatibility_flag[2] || sub_layer_profile_compatibility_flag[3] || sub_layer_profile_compatibility_flag[4] || sub_layer_profile_compatibility_flag[5] || sub_layer_profile_compatibility_flag[9]) {
                sub_layer_inbld_flag[i] u(1)
            } else {
                sub_layer_reserved_zero_bit[i] u(1)
            }
        }
        if (sub_layer_level_present_flag[i]) {
            sub_layer_level_idc[i] u(8)
        }
    }
}
scaling_list_data() {
    for (sizeId = 0; sizeId < 4; sizeId++) {
        for (matrixId = 0; matrixId < 6; matrixId += sizeId == 3 ? 3 : 1) {
            scaling_list_pred_mode_flag[sizeId][matrixId] u(1)
            if (!scaling_list_pred_mode_flag[sizeId][matrixId]) {
                scaling_list_pred_matrix_id_delta[sizeId][matrixId] ue(v)
            } else {
                nextCoef = 8
                coefNum = Min(64, 1 << 4 + (sizeId << 1))
                if (sizeId > 1) {
                    scaling_list_dc_coef_minus8[sizeId - 2][matrixId] se(v)
                    nextCoef = scaling_list_dc_coef_minus8[sizeId - 2][matrixId] + 8
                }
                for (i = 0; i < coefNum; i++) {
                    scaling_list_delta_coef se(v)
                    nextCoef = (nextCoef + scaling_list_delta_coef + 256) % 256
                    ScalingList[sizeId][matrixId][i] = nextCoef
                }
            }
        }
    }
}
sei_message() {
    payloadType = 0
    while (next_bits(8) == 255) {
        ff_byte f(8)
        payloadType += 255
    }
    last_payload_type_byte u(8)
    payloadType += last_payload_type_byte
    payloadSize = 0
    while (next_bits(8) == 255) {
        ff_byte f(8)
        payloadSize += 255
    }
    last_payload_size_byte u(8)
    payloadSize += last_payload_size_byte
    sei_payload(payloadType, payloadSize)
}
slice_segment_header() {
    first_slice_segment_in_pic_flag u(1)
    if (nal_unit_type >= BLA_W_LP && nal_unit_type <= RSV_IRAP_VCL23) {
        no_output_of_prior_pics_flag u(1)
    }
    slice_pic_parameter_set_id ue(v)
    if (!first_slice_segment_in_pic_flag) {
        if (dependent_slice_segments_enabled_flag) {
            dependent_slice_segment_flag u(1)
        }
        slice_segment_address u(v)
    }
    if (!dependent_slice_segment_flag) {
        for (i = 0; i < num_extra_slice_header_bits; i++) {
            slice_reserved_flag[i] u(1)
        }
        slice_type ue(v)
        if (output_flag_present_flag) {
            pic_output_flag u(1)
        }
        if (separate_colour_plane_flag == 1) {
            colour_plane_id u(2)
        }
        if (nal_unit_type != IDR_W_RADL && nal_unit_type != IDR_N_LP) {
            slice_pic_order_cnt_lsb u(v)
            short_term_ref_pic_set_sps_flag u(1)
            if (!short_term_ref_pic_set_sps_flag) {
                st_ref_pic_set(num_short_term_ref_pic_sets)
            } else if (num_short_term_ref_pic_sets > 1) {
                short_term_ref_pic_set_idx u(v)
            }
            if (long_term_ref_pics_present_flag) {
                if (num_long_term_ref_pics_sps > 0) {
                    num_long_term_sps ue(v)
                }
                num_long_term_pics ue(v)
                for (i = 0; i < num_long_term_sps + num_long_term_pics; i++) {
                    if (i < num_long_term_sps) {
                        if (num_long_term_ref_pics_sps > 1) {
                            lt_idx_sps[i] u(v)
                        }
                    } else {
                        poc_lsb_lt[i] u(v)
                        used_by_curr_pic_lt_flag[i] u(1)
                    }
                    delta_poc_msb_present_flag[i] u(1)
                    if (delta_poc_msb_present_flag[i]) {
                        delta_poc_msb_cycle_lt[i] ue(v)
                    }
                }
            }
            if (sps_temporal_mvp_enabled_flag) {
                slice_temporal_mvp_enabled_flag u(1)
            }
        }
        if (sample_adaptive_offset_enabled_flag) {
            slice_sao_luma_flag u(1)
            if (ChromaArrayType != 0) {
                slice_sao_chroma_flag u(1)
            }
        }
        if (slice_type == P || slice_type == B) {
            num_ref_idx_active_override_flag u(1)
            if (num_ref_idx_active_override_flag) {
                num_ref_idx_l0_active_minus1 ue(v)
                if (slice_type == B) {
                    num_ref_idx_l1_active_minus1 ue(v)
                }
            }
            if (lists_modification_present_flag && NumPicTotalCurr > 1) {
                ref_pic_lists_modification()
            }
            if (slice_type == B) {
                mvd_l1_zero_flag u(1)
            }
            if (cabac_init_present_flag) {
                cabac_init_flag u(1)
            }
            if (slice_temporal_mvp_enabled_flag) {
                if (slice_type == B) {
                    collocated_from_l0_flag u(1)
                }
                if (collocated_from_l0_flag && num_ref_idx_l0_active_minus1 > 0 || !collocated_from_l0_flag && num_ref_idx_l1_active_minus1 > 0) {
                    collocated_ref_idx ue(v)
                }
            }
            if (weighted_pred_flag && slice_type == P || weighted_bipred_flag && slice_type == B) {
                pred_weight_table()
            }
            five_minus_max_num_merge_cand ue(v)
            if (motion_vector_resolution_control_idc == 2) {
                use_integer_mv_flag u(1)
            }
        }
        slice_qp_delta se(v)
        if (pps_slice_chroma_qp_offsets_present_flag) {
            slice_cb_qp_offset se(v)
            slice_cr_qp_offset se(v)
        }
        if (pps_slice_act_qp_offsets_present_flag) {
            slice_act_y_qp_offset se(v)
            slice_act_cb_qp_offset se(v)
            slice_act_cr_qp_offset se(v)
        }
        if (chroma_qp_offset_list_enabled_flag) {
            cu_chroma_qp_offset_enabled_flag u(1)
        }
        if (deblocking_filter_override_enabled_flag) {
            deblocking_filter_override_flag u(1)
        }
        if (deblocking_filter_override_flag) {
            slice_deblocking_filter_disabled_flag u(1)
            if (!slice_deblocking_filter_disabled_flag) {
                slice_beta_offset_div2 se(v)
                slice_tc_offset_div2 se(v)
            }
        }
        if (pps_loop_filter_across_slices_enabled_flag && (slice_sao_luma_flag || slice_sao_chroma_flag || !slice_deblocking_filter_disabled_flag)) {
            slice_loop_filter_across_slices_enabled_flag u(1)
        }
    }
    if (tiles_enabled_flag || entropy_coding_sync_enabled_flag) {
        num_entry_point_offsets ue(v)
        if (num_entry_point_offsets > 0) {
            offset_len_minus1 ue(v)
            for (i = 0; i < num_entry_point_offsets; i++) {
                entry_point_offset_minus1[i] u(v)
            }
        }
    }
    if (slice_segment_header_extension_present_flag) {
        slice_segment_header_extension_length ue(v)
        for (i = 0; i < slice_segment_header_extension_length; i++) {
            slice_segment_header_extension_data_byte[i] u(8)
        }
    }
    byte_alignment()
}
ref_pic_lists_modification() {
    ref_pic_list_modification_flag_l0 u(1)
    if (ref_pic_list_modification_flag_l0) {
        for (i = 0; i <= num_ref_idx_l0_active_minus1; i++) {
            list_entry_l0[i] u(v)
        }
    }
    if (slice_type == B) {
        ref_pic_list_modification_flag_l1 u(1)
        if (ref_pic_list_modification_flag_l1) {
            for (i = 0; i <= num_ref_idx_l1_active_minus1; i++) {
                list_entry_l1[i] u(v)
            }
        }
    }
}
pred_weight_table() {
    luma_log2_weight_denom ue(v)
    if (ChromaArrayType != 0) {
        delta_chroma_log2_weight_denom se(v)
    }
    for (i = 0; i <= num_ref_idx_l0_active_minus1; i++) {
        if (pic_layer_id(RefPicList0[i]) != nuh_layer_id || PicOrderCnt(RefPicList0[i]) != PicOrderCnt(CurrPic)) {
            luma_weight_l0_flag[i] u(1)
        }
    }
    if (ChromaArrayType != 0) {
        for (i = 0; i <= num_ref_idx_l0_active_minus1; i++) {
            if (pic_layer_id(RefPicList0[i]) != nuh_layer_id || PicOrderCnt(RefPicList0[i]) != PicOrderCnt(CurrPic)) {
                chroma_weight_l0_flag[i] u(1)
            }
        }
    }
    for (i = 0; i <= num_ref_idx_l0_active_minus1; i++) {
        if (luma_weight_l0_flag[i]) {
            delta_luma_weight_l0[i] se(v)
            luma_offset_l0[i] se(v)
        }
        if (chroma_weight_l0_flag[i]) {
            for (j = 0; j < 2; j++) {
                delta_chroma_weight_l0[i][j] se(v)
                delta_chroma_offset_l0[i][j] se(v)
            }
        }
    }
    if (slice_type == B) {
        for (i = 0; i <= num_ref_idx_l1_active_minus1; i++) {
            if (pic_layer_id(RefPicList0[i]) != nuh_layer_id || PicOrderCnt(RefPicList1[i]) != PicOrderCnt(CurrPic)) {
                luma_weight_l1_flag[i] u(1)
            }
        }
        if (ChromaArrayType != 0) {
            for (i = 0; i <= num_ref_idx_l1_active_minus1; i++) {
                if (pic_layer_id(RefPicList0[i]) != nuh_layer_id || PicOrderCnt(RefPicList1[i]) != PicOrderCnt(CurrPic)) {
                    chroma_weight_l1_flag[i] u(1)
                }
            }
        }
        for (i = 0; i <= num_ref_idx_l1_active_minus1; i++) {
            if (luma_weight_l1_flag[i]) {
                delta_luma_weight_l1[i] se(v)
                luma_offset_l1[i] se(v)
            }
            if (chroma_weight_l1_flag[i]) {
                for (j = 0; j < 2; j++) {
                    delta_chroma_weight_l1[i][j] se(v)
                    delta_chroma_offset_l1[i][j] se(v)
                }
            }
        }
    }
}
st_ref_pic_set(stRpsIdx) {
    if (stRpsIdx != 0) {
        inter_ref_pic_set_prediction_flag u(1)
    }
    if (inter_ref_pic_set_prediction_flag) {
        if (stRpsIdx == num_short_term_ref_pic_sets) {
            delta_idx_minus1 ue(v)
        }
        delta_rps_sign u(1)
        abs_delta_rps_minus1 ue(v)
        for (j = 0; j <= NumDeltaPocs[RefRpsIdx]; j++) {
            used_by_curr_pic_flag[j] u(1)
            if (!used_by_curr_pic_flag[j]) {
                use_delta_flag[j] u(1)
            }
        }
    } else {
        num_negative_pics ue(v)
        num_positive_pics ue(v)
        for (i = 0; i < num_negative_pics; i++) {
            delta_poc_s0_minus1[i] ue(v)
            used_by_curr_pic_s0_flag[i] u(1)
        }
        for (i = 0; i < num_positive_pics; i++) {
            delta_poc_s1_minus1[i] ue(v)
            used_by_curr_pic_s1_flag[i] u(1)
        }
    }
}
hrd_parameters(commonInfPresentFlag, maxNumSubLayersMinus1) {
    if (commonInfPresentFlag) {
        nal_hrd_parameters_present_flag u(1)
        vcl_hrd_parameters_present_flag u(1)
        if (nal_hrd_parameters_present_flag || vcl_hrd_parameters_present_flag) {
            sub_pic_hrd_params_present_flag u(1)
            if (sub_pic_hrd_params_present_flag) {
                tick_divisor_minus2 u(8)
                du_cpb_removal_delay_increment_length_minus1 u(5)
                sub_pic_cpb_params_in_pic_timing_sei_flag u(1)
                dpb_output_delay_du_length_minus1 u(5)
            }
            bit_rate_scale u(4)
            cpb_size_scale u(4)
            if (sub_pic_hrd_params_present_flag) {
                cpb_size_du_scale u(4)
            }
            initial_cpb_removal_delay_length_minus1 u(5)
            au_cpb_removal_delay_length_minus1 u(5)
            dpb_output_delay_length_minus1 u(5)
        }
    }
    for (i = 0; i <= maxNumSubLayersMinus1; i++) {
        fixed_pic_rate_general_flag[i] u(1)
        if (!fixed_pic_rate_general_flag[i]) {
            fixed_pic_rate_within_cvs_flag[i] u(1)
        }
        if (fixed_pic_rate_within_cvs_flag[i]) {
            elemental_duration_in_tc_minus1[i] ue(v)
        } else {
            low_delay_hrd_flag[i] u(1)
        }
        if (!low_delay_hrd_flag[i]) {
            cpb_cnt_minus1[i] ue(v)
        }
        if (nal_hrd_parameters_present_flag) {
            sub_layer_hrd_parameters(i)
        }
        if (vcl_hrd_parameters_present_flag) {
            sub_layer_hrd_parameters(i)
        }
    }
}
sub_layer_hrd_parameters(subLayerId) {
    CpbCnt = cpb_cnt_minus1[subLayerId] + 1
    for (i = 0; i < CpbCnt; i++) {
        bit_rate_value_minus1[i] ue(v)
        cpb_size_value_minus1[i] ue(v)
        if (sub_pic_hrd_params_present_flag) {
            cpb_size_du_value_minus1[i] ue(v)
            bit_rate_du_value_minus1[i] ue(v)
        }
        cbr_flag[i] u(1)
    }
}
global {
    EXTENDED_SAR = 255
}
vui_parameters() {
    aspect_ratio_info_present_flag u(1)
    if (aspect_ratio_info_present_flag) {
        aspect_ratio_idc u(8)
        if (aspect_ratio_idc == EXTENDED_SAR) {
            sar_width u(16)
            sar_height u(16)
        }
    }
    overscan_info_present_flag u(1)
    if (overscan_info_present_flag) {
        overscan_appropriate_flag u(1)
    }
    video_signal_type_present_flag u(1)
    if (video_signal_type_present_flag) {
        video_format u(3)
        video_full_range_flag u(1)
        colour_description_present_flag u(1)
        if (colour_description_present_flag) {
            colour_primaries u(8)
            transfer_characteristics u(8)
            matrix_coeffs u(8)
        }
    }
    chroma_loc_info_present_flag u(1)
    if (chroma_loc_info_present_flag) {
        chroma_sample_loc_type_top_field ue(v)
        chroma_sample_loc_type_bottom_field ue(v)
    }
    neutral_chroma_indication_flag u(1)
    field_seq_flag u(1)
    frame_field_info_present_flag u(1)
    default_display_window_flag u(1)
    if (default_display_window_flag) {
        def_disp_win_left_offset ue(v)
        def_disp_win_right_offset ue(v)
        def_disp_win_top_offset ue(v)
        def_disp_win_bottom_offset ue(v)
    }
    vui_timing_info_present_flag u(1)
    if (vui_timing_info_present_flag) {
        vui_num_units_in_tick u(32)
        vui_time_scale u(32)
        vui_poc_proportional_to_timing_flag u(1)
        if (vui_poc_proportional_to_timing_flag) {
            vui_num_ticks_poc_diff_one_minus1 ue(v)
        }
        vui_hrd_parameters_present_flag u(1)
        if (vui_hrd_parameters_present_flag) {
            hrd_parameters(1, sps_max_sub_layers_minus1)
        }
    }
    bitstream_restriction_flag u(1)
    if (bitstream_restriction_flag) {
        tiles_fixed_structure_flag u(1)
        motion_vectors_over_pic_boundaries_flag u(1)
        restricted_ref_pic_lists_flag u(1)
        min_spatial_segmentation_idc ue(v)
        max_bytes_per_pic_denom ue(v)
        max_bits_per_min_cu_denom ue(v)
        log2_max_mv_length_horizontal ue(v)
        log2_max_mv_length_vertical ue(v)
    }
}
global {
    while (next_nalu()) {
        nal_unit()
    }
}
