sei_payload(payloadType, payloadSize) {
    init_sei_payload(payloadSize)
    if (nal_unit_type == PREFIX_SEI_NUT) {
        if (payloadType == 0) {
            buffering_period(payloadSize)
        } else if (payloadType == 1) {
            pic_timing(payloadSize)
        } else if (payloadType == 2) {
            pan_scan_rect(payloadSize)
        } else if (payloadType == 3) {
            filler_payload(payloadSize)
        } else if (payloadType == 4) {
            user_data_registered_itu_t_t35(payloadSize)
        } else if (payloadType == 5) {
            user_data_unregistered(payloadSize)
        } else if (payloadType == 6) {
            recovery_point(payloadSize)
        } else if (payloadType == 9) {
            scene_info(payloadSize)
        } else if (payloadType == 15) {
            picture_snapshot(payloadSize)
        } else if (payloadType == 16) {
            progressive_refinement_segment_start(payloadSize)
        } else if (payloadType == 17) {
            progressive_refinement_segment_end(payloadSize)
        } else if (payloadType == 19) {
            film_grain_characteristics(payloadSize)
        } else if (payloadType == 22) {
            post_filter_hint(payloadSize)
        } else if (payloadType == 23) {
            tone_mapping_info(payloadSize)
        } else if (payloadType == 45) {
            frame_packing_arrangement(payloadSize)
        } else if (payloadType == 47) {
            display_orientation(payloadSize)
        } else if (payloadType == 56) {
            green_metadata(payloadSize)
        } else if (payloadType == 128) {
            structure_of_pictures_info(payloadSize)
        } else if (payloadType == 129) {
            active_parameter_sets(payloadSize)
        } else if (payloadType == 130) {
            decoding_unit_info(payloadSize)
        } else if (payloadType == 131) {
            temporal_sub_layer_zero_idx(payloadSize)
        } else if (payloadType == 133) {
            scalable_nesting(payloadSize)
        } else if (payloadType == 134) {
            region_refresh_info(payloadSize)
        } else if (payloadType == 135) {
            no_display(payloadSize)
        } else if (payloadType == 136) {
            time_code(payloadSize)
        } else if (payloadType == 137) {
            mastering_display_colour_volume(payloadSize)
        } else if (payloadType == 138) {
            segmented_rect_frame_packing_arrangement(payloadSize)
        } else if (payloadType == 139) {
            temporal_motion_constrained_tile_sets(payloadSize)
        } else if (payloadType == 140) {
            chroma_resampling_filter_hint(payloadSize)
        } else if (payloadType == 141) {
            knee_function_info(payloadSize)
        } else if (payloadType == 142) {
            colour_remapping_info(payloadSize)
        } else if (payloadType == 143) {
            deinterlaced_field_identification(payloadSize)
        } else if (payloadType == 144) {
            content_light_level_info(payloadSize)
        } else if (payloadType == 145) {
            dependent_rap_indication(payloadSize)
        } else if (payloadType == 146) {
            coded_region_completion(payloadSize)
        } else if (payloadType == 147) {
            alternative_transfer_characteristics(payloadSize)
        } else if (payloadType == 148) {
            ambient_viewing_environment(payloadSize)
        } else if (payloadType == 149) {
            content_colour_volume(payloadSize)
        } else if (payloadType == 150) {
            equirectangular_projection(payloadSize)
        } else if (payloadType == 151) {
            cubemap_projection(payloadSize)
        } else if (payloadType == 154) {
            sphere_rotation(payloadSize)
        } else if (payloadType == 155) {
            regionwise_packing(payloadSize)
        } else if (payloadType == 156) {
            omni_viewport(payloadSize)
        } else if (payloadType == 157) {
            regional_nesting(payloadSize)
        } else if (payloadType == 158) {
            mcts_extraction_info_sets(payloadSize)
        } else if (payloadType == 159) {
            mcts_extraction_info_nesting(payloadSize)
        } else if (payloadType == 160) {
            layers_not_present(payloadSize)
        } else if (payloadType == 161) {
            inter_layer_constrained_tile_sets(payloadSize)
        } else if (payloadType == 162) {
            bsp_nesting(payloadSize)
        } else if (payloadType == 163) {
            bsp_initial_arrival_time(payloadSize)
        } else if (payloadType == 164) {
            sub_bitstream_property(payloadSize)
        } else if (payloadType == 165) {
            alpha_channel_info(payloadSize)
        } else if (payloadType == 166) {
            overlay_info(payloadSize)
        } else if (payloadType == 167) {
            temporal_mv_prediction_constraints(payloadSize)
        } else if (payloadType == 168) {
            frame_field_info(payloadSize)
        } else if (payloadType == 176) {
            three_dimensional_reference_displays_info(payloadSize)
        } else if (payloadType == 177) {
            depth_representation_info(payloadSize)
        } else if (payloadType == 178) {
            multiview_scene_info(payloadSize)
        } else if (payloadType == 179) {
            multiview_acquisition_info(payloadSize)
        } else if (payloadType == 180) {
            multiview_view_position(payloadSize)
        } else if (payloadType == 181) {
            alternative_depth_info(payloadSize)
        } else {
            reserved_sei_message(payloadSize)
        }
    } else if (payloadType == 3) {
        filler_payload(payloadSize)
    } else if (payloadType == 4) {
        user_data_registered_itu_t_t35(payloadSize)
    } else if (payloadType == 5) {
        user_data_unregistered(payloadSize)
    } else if (payloadType == 17) {
        progressive_refinement_segment_end(payloadSize)
    } else if (payloadType == 22) {
        post_filter_hint(payloadSize)
    } else if (payloadType == 132) {
        decoded_picture_hash(payloadSize)
    } else if (payloadType == 146) {
        coded_region_completion(payloadSize)
    } else {
        reserved_sei_message(payloadSize)
    }
    if (more_data_in_payload()) {
        while (payload_extension_present()) {
            reserved_payload_extension_data u(1)
        }
        payload_bit_equal_to_one f(1)
        while (!byte_aligned()) {
            payload_bit_equal_to_zero f(1)
        }
    }
}
infer NalHrdBpPresentFlag = nal_hrd_parameters_present_flag
infer VclHrdBpPresentFlag = vcl_hrd_parameters_present_flag
infer CpbDpbDelaysPresentFlag = nal_hrd_parameters_present_flag || vcl_hrd_parameters_present_flag
buffering_period(payloadSize) {
    bp_seq_parameter_set_id ue(v)
    if (!sub_pic_hrd_params_present_flag) {
        irap_cpb_params_present_flag u(1)
    }
    if (irap_cpb_params_present_flag) {
        cpb_delay_offset u(v)
        dpb_delay_offset u(v)
    }
    concatenation_flag u(1)
    au_cpb_removal_delay_delta_minus1 u(v)
    if (NalHrdBpPresentFlag) {
        for (i = 0; i < CpbCnt; i++) {
            nal_initial_cpb_removal_delay[i] u(v)
            nal_initial_cpb_removal_offset[i] u(v)
            if (sub_pic_hrd_params_present_flag || irap_cpb_params_present_flag) {
                nal_initial_alt_cpb_removal_delay[i] u(v)
                nal_initial_alt_cpb_removal_offset[i] u(v)
            }
        }
    }
    if (VclHrdBpPresentFlag) {
        for (i = 0; i < CpbCnt; i++) {
            vcl_initial_cpb_removal_delay[i] u(v)
            vcl_initial_cpb_removal_offset[i] u(v)
            if (sub_pic_hrd_params_present_flag || irap_cpb_params_present_flag) {
                vcl_initial_alt_cpb_removal_delay[i] u(v)
                vcl_initial_alt_cpb_removal_offset[i] u(v)
            }
        }
    }
    if (payload_extension_present()) {
        use_alt_cpb_params_flag u(1)
    }
}
pic_timing(payloadSize) {
    if (frame_field_info_present_flag) {
        pic_struct u(4)
        source_scan_type u(2)
        duplicate_flag u(1)
    }
    if (CpbDpbDelaysPresentFlag) {
        au_cpb_removal_delay_minus1 u(v)
        pic_dpb_output_delay u(v)
        if (sub_pic_hrd_params_present_flag) {
            pic_dpb_output_du_delay u(v)
        }
        if (sub_pic_hrd_params_present_flag && sub_pic_cpb_params_in_pic_timing_sei_flag) {
            num_decoding_units_minus1 ue(v)
            du_common_cpb_removal_delay_flag u(1)
            if (du_common_cpb_removal_delay_flag) {
                du_common_cpb_removal_delay_increment_minus1 u(v)
            }
            for (i = 0; i <= num_decoding_units_minus1; i++) {
                num_nalus_in_du_minus1[i] ue(v)
                if (!du_common_cpb_removal_delay_flag && i < num_decoding_units_minus1) {
                    du_cpb_removal_delay_increment_minus1[i] u(v)
                }
            }
        }
    }
}
